#!/usr/bin/env python
# -*- coding=utf-8 -*-

"""
The main iodog script.
"""

import datetime
import logging

import dbgp as dbgp
from utils import uidof, t
import rules


logging.basicConfig(level=logging.DEBUG)


class Iodog(object):
    """Iodog main class."""

    def __init__(self):
        self.api = None     # The dbgp.Api object
        self.rulesets = []  # The list of ruleset instances
        self.file = None    # The current output file

    def investigate(self):
        """Called when a breakpoint is reached."""
        logging.debug("Investigation starting.")

    def start_session(self):
        """Called at the beginning of a session."""
        logging.debug("Start")

        uid = uidof(self.api.appid)
        fnfmt = "iodog_%Y%m%d%H%M%S%f_%%s_%%s.xml"
        fntpl = datetime.datetime.now().strftime(fnfmt)
        filename = fntpl % (self.api.appid, uid)
        self.file = out = open(filename, "w")

        logging.debug(" File: " + self.api.startfile)
        logging.debug(" Proc: " + self.api.appid)
        logging.debug(" User: " + uid)
        logging.debug(" Dest: " + filename)

        out.write('<?xml version="1.0"?>')
        out.write('<?xml-stylesheet type="text/xsl" href="style-0.1.xsl"?>')
        out.write('<report>')
        out.write(t('generator', 'iodog v0.1'))
        out.write(t('created', datetime.datetime.now().isoformat()))
        out.write(t('file', self.api.startfile))
        out.write(t('user', uid))
        out.write(t('process', self.api.appid))

        [rs.register() for rs in self.rulesets]

    def end_session(self):
        """Called at the end of a session."""
        logging.debug("End")
        self.file.write('</report>')
        self.file.close()

    def main(self):
        """Runs iodog."""

        try:
            logging.debug("Loading rulesets")
            self.rulesets = rules.get_rulesets(self)

            while True:
                logging.info("Waiting for debugger")
                self.api = dbgp.Api(dbgp.Connection())

                logging.debug("Starting session")
                self.start_session()

                while True:
                    status = self.api.status()

                    if status.is_stopping():
                        logging.debug("(-> %s) detaching" % status)
                        break
                    elif status.is_break():
                        self.investigate()
                        self.api.run()
                    else:
                        logging.debug("(-> %s)" % status)
                        self.api.run()

                self.api.detach()
                self.end_session()
        except KeyboardInterrupt:
            return

        self.file.write(*args, **kwargs)

if __name__ == "__main__":
    Iodog().main()
