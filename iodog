#!/usr/bin/env python2
# -*- coding=utf-8 -*-

"""
The main iodog script.
"""

import datetime
import logging
import xml.etree.ElementTree as ElementTree

import dbgp as dbgp
from event import Event
from utils import uidof, t
import rules


logging.basicConfig(level=logging.DEBUG)


class Iodog(object):
    """Iodog main class."""

    # Our connection to the debugger
    # @type dbgp.Api
    api = None

    # All active rulesets
    # @type list[Ruleset]
    rulesets = []

    # The current file
    # @type file
    file = None

    def __init__(self):
        return

    def investigate(self):
        """Called when a breakpoint is reached."""
        dt = datetime.datetime.now()
        call = None

        arg_eval = self.api.eval("func_get_args()")
        args = [elem.value for elem in arg_eval.get_context()][1:]

        stack = self.api.stack_get()
        sx = ''.join([ElementTree.tostring(x) for x in stack.as_xml()])

        # Smash the XML namespaces
        sx = sx.replace('ns0:stack xmlns:ns0="urn:debugger_protocol_v1"',
                        'stack')

        for i, frame in enumerate(stack.get_stack()):
            if i == 0:
                call = frame.get('where')

        return Event(t=dt, call=call, stack=sx, args=args)

    def write_event(self, ev):
        self.file.write(ev.to_xml())

    def start_session(self):
        """Called at the beginning of a session."""
        logging.debug("Start")

        uid = uidof(self.api.appid)
        fnfmt = "iodog_%Y%m%d%H%M%S%f_%%s_%%s.xml"
        fntpl = datetime.datetime.now().strftime(fnfmt)
        filename = fntpl % (self.api.appid, uid)
        self.file = out = open(filename, "w")

        logging.debug(" File: " + self.api.startfile)
        logging.debug(" Proc: " + self.api.appid)
        logging.debug(" User: " + uid)
        logging.debug(" Dest: " + filename)

        out.write('<?xml version="1.0"?>')
        out.write('<?xml-stylesheet type="text/xsl" href="style-0.1.xsl"?>')
        out.write('<report>')
        out.write(t('generator', 'iodog v0.1'))
        out.write(t('created', datetime.datetime.now().isoformat()))
        out.write(t('file', self.api.startfile))
        out.write(t('user', uid))
        out.write(t('process', self.api.appid))

        out.write('<rulesets>')
        for ruleset in self.rulesets:
            out.write(t('ruleset', ruleset))
        out.write('</rulesets>')

        [rs.register() for rs in self.rulesets]

        out.write('<events>')

    def end_session(self):
        """Called at the end of a session."""
        logging.debug("End")
        self.file.write('</events>')
        self.file.write('</report>')
        self.file.close()

    def main(self):
        """Runs iodog."""

        try:
            logging.debug("Loading rulesets")
            self.rulesets = rules.get_rulesets(self)

            while True:
                logging.info("Waiting for debugger")
                self.api = dbgp.Api(dbgp.Connection())

                logging.debug("Starting session")
                self.start_session()

                while True:
                    status = self.api.status()

                    if status.is_stopping():
                        logging.debug("(-> %s) detaching" % status)
                        break
                    elif status.is_break():
                        ev = self.investigate()
                        [rs.annotate(ev) for rs in self.rulesets]
                        self.write_event(ev)
                        self.api.run()
                    else:
                        logging.debug("(-> %s)" % status)
                        self.api.run()

                self.api.detach()
                self.end_session()
        except KeyboardInterrupt:
            return

if __name__ == "__main__":
    Iodog().main()
